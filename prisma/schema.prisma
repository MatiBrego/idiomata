// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String
  password String
  isAdmin Boolean @default(false)

  languageId Int?

  friends User[] @relation("friends")
  friendsAddedMe User[] @relation("friends")
  requestsSent FriendRequest[] @relation("requestsSent")
  requestsReceived FriendRequest[] @relation("requestsReceived")

  wordAttempts WordAttempt[] @relation("wordAttempt")
  language Language? @relation("userLanguage", fields: [languageId], references: [id])
  memotestStats MemotestStats[] @relation("memotestStats")
}

model Category{
  id Int @id @default(autoincrement())
  name String @unique
  imgPath String @default("categoryImages/tags_categories_icon_145927.png")
  words Word[] @relation("word") // One to many relationship
}

model Language{
  id Int @id @default(autoincrement())
  name String @unique

  translations Translation[] @relation("translation") // One to many relationship
  attempts WordAttempt[] @relation("wordAttempt")
  senteces Sentence[] @relation("sentence")
  users User[] @relation("userLanguage")
}

model Word{
  id Int @id @default(autoincrement())
  inEnglish String @unique
  categoryId Int

  category Category @relation("word" , fields: [categoryId], references: [id], onDelete: Cascade)

  translations Translation[] @relation("translation") // One to many relationship
  wordAttempts WordAttempt[] @relation("wordAttempt")
  word SentenceBlank[] @relation("blank")
}

model Translation{
  id Int @id @default(autoincrement())
  translated String // Translation of the word
  wordId Int
  languageId Int
  difficulty Difficulty

  word Word @relation("translation", fields: [wordId], references: [id], onDelete: Cascade) 
  language Language @relation("translation", fields: [languageId], references: [id], onDelete: Cascade)

  wordAttempts WordAttempt[] @relation("wordAttempt")
}

enum Difficulty{
  HARD
  MID
  EASY
}

model WordAttempt{
  id Int @id @default(autoincrement())
  correct Boolean
  translationId Int?  
  userId Int
  wordId Int
  languageId Int
  game Game

  translation Translation? @relation("wordAttempt", fields: [translationId], references: [id], onDelete: Cascade)
  user User @relation("wordAttempt", fields: [userId], references: [id], onDelete: Cascade)
  word Word @relation("wordAttempt", fields: [wordId], references: [id], onDelete: Cascade)
  language Language @relation("wordAttempt", fields: [languageId], references: [id], onDelete: Cascade)
}

model Sentence{
  id Int @id @default(autoincrement())
  languageId Int
  difficulty Difficulty?

  language Language @relation("sentence", fields: [languageId], references: [id], onDelete: Cascade)

  blanks SentenceBlank[] @relation("blank")
  parts SentencePart[] @relation("part")
}

model SentenceBlank{
  id Int @id @default(autoincrement())
  wordId Int
  sentenceId Int
  position Int

  sentence Sentence @relation("blank", fields: [sentenceId], references: [id], onDelete: Cascade)
  word Word @relation("blank", fields: [wordId], references: [id], onDelete: Cascade)
}

model SentencePart{
  id Int @id @default(autoincrement())
  sentenceId Int
  content String
  position Int

  sentence Sentence @relation("part", fields: [sentenceId], references: [id], onDelete: Cascade)
}

model FriendRequest{
  id Int @id @default(autoincrement())
  requesterId Int
  requestedId Int

  requester User @relation("requestsSent", fields: requesterId, references: [id], onDelete: Cascade)
  requested User @relation("requestsReceived", fields: requestedId, references: [id], onDelete: Cascade)
}

enum Game{
  TranslateIt
  FillInTheGaps
  Memotest
}

model MemotestStats{
  id Int @id @default(autoincrement())
  bestTime Int //In seconds
  userId Int @unique

  user User @relation("memotestStats", fields: [userId], references: [id], onDelete: Cascade)
}